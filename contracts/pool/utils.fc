int sqrt(int x) inline {
  if (x == 0) { return x; }

  int r = 181;
  int xx = x;
  if (xx >= 0x100000000000000000000000000000000) {
    xx >>= 128;
    r <<= 64;
  }
  if (xx >= 0x10000000000000000) {
    xx >>= 64;
    r <<= 32;
  }
  if (xx >= 0x100000000) {
    xx >>= 32;
    r <<= 16;
  }
  if (xx >= 0x10000) {
    xx >>= 16;
    r <<= 8;
  }

  r = (r * (xx + 65536)) >> 18;

  repeat(7) {
    r = (r + x / r) >> 1;
  }

  int r1 = x / r;

  return (r < r1 ? r : r1);
}

() call_pay_to(int amount, int mode, int query_id, slice to_address, int exit_code, int amount0_out, int amount1_out) impure inline_ref {
  var body = begin_cell()
    .store_uint(pay_to, 32)
    .store_uint(query_id, 64)
    .store_slice(to_address)
    .store_uint(exit_code, 32)
    .store_uint(1, 1)
    .store_ref(begin_cell()
      .store_coins(amount0_out) 
      .store_slice(storage::token0_address)
      .store_coins(amount1_out)
      .store_slice(storage::token1_address)
    .end_cell());
  send_message_nobounce(amount, storage::router_address, body.end_cell(), mode);
}

int is_resolvable?(slice addr) inline {
    (int wc, _) = parse_std_addr(addr);
    return wc == WORKCHAIN;
}

slice address_to_hex_string(int value) inline {
  if (value == 0) {
    builder buffer = begin_cell();
    int i = 0;
    while (i < 64){
      buffer = buffer.store_uint("0"u, 8);
      i += 1;
    }
    return buffer.end_cell().begin_parse().preload_bits(i * 8);
  } else {

    int j = value;
    int length = 0;
    while (j != 0) {
      length += 1;
      j = j >> 4;
    }
    
    int mask = 15;
    builder buffer = begin_cell();

    while (value != 0) {
      int curr = (value & mask);
      if(curr > 9){
        buffer = buffer.store_uint(55 + curr, 8);
      } else {
        buffer = buffer.store_uint(48 + curr, 8);
      }
      value = value >> 4;
    }

    builder final_cell = begin_cell();

    slice reversed_buffer = buffer.end_cell().begin_parse();
    int i = 64;
    while(i > 0){
      i -= 1;
      slice chr = reversed_buffer.preload_bits_offset(i * 8, 8);
      final_cell = final_cell.store_slice(chr);
    }
    return final_cell.end_cell().begin_parse().preload_bits(512);
  }
}